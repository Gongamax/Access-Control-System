library ieee;
use ieee.std_logic_1164.all;

entity KeyControl is
port(
--Input ports
		reset		: in std_logic;
		clk		: in std_logic;
		Kack		: in std_logic;
		Kpress	: in std_logic;
--Output ports
		Kval		: out std_logic;
		Kscan		: out std_logic;
);
end KeyControl;

architecture behavioral of KeyControl is

type State is (Scanning, Key_Pressed, Key_Released);

signal CurrentState, NextState : State;

begin
CurrentState <= Scanning when reset = '1' else NextState when rising_edge(clk);

--Progress to next state
GenerateNextState:
process (CurrentState, Kack, Kpress)
	begin
		case CurrentState is
			when Scanning		=> if (Kpress = '1') then
											NextState <= Key_Pressed;
										else
											NextState <= Scanning;
										end if;
										
			when Key_Pressed	=> if (Kpress = '0') then
											NextState <= Key_Released;
										else
											NextState <= Key_Pressed;
										end if;
								
			when Key_Released	=> if (Kack = '1' and Kpress = '0') then 
											NextState <= Scanning;
										else 
											NextState <= Key_Released;
										end if;
		end case;
	end process;
	
--Output values
Kval <= '1' when (CurrentState = Key_Pressed and Kpress = '1') else '0';
Kscan <= '1' when ((Kack = '1' and Kpress = '0') and CurrentState = Scanning) else '0';

end behavioral;