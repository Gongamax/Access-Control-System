library ieee;
use ieee.std_logic_1164.all;

entity MAC is 
Port(--Input ports
     putget		: in std_logic;
     incPut		: in std_logic;
	  incGet		: in std_logic;
	  clk			: in std_logic;
	  Reset		: in std_logic;
	  --Output ports
	  Address		: out std_logic_vector(2 downto 0);
	  full		: out std_logic;
	  empty	: out std_logic);
end MAC;

architecture structural of MAC is

component MUX is
port(
--Input ports
  A, B: in std_logic_vector(2 downto 0);
  S: in std_logic;
  --Output ports
  Y: out std_logic_vector(2 downto 0)
  );
end component;

component Counter4Bit is
PORT(
-- Input ports
	CE : in std_logic;
	CLK : in std_logic;
	clr : in std_logic;
	UpDown : in std_logic; -- New input port for controlling direction
-- Output ports
	Q : out std_logic_vector (3 downto 0)
	);
end component;

component Counter3Bit is
PORT(
-- Input ports
   CE : in std_logic;
   CLK : in std_logic;
   clr: in std_logic;
-- Output ports
	Q: out std_logic_vector (2 downto 0)
	);
end component;
    
--Signals
signal Ax : std_logic_vector (2 downto 0);
signal Bx : std_logic_vector (2 downto 0);
signal Cex: std_logic;
signal e: std_logic;
signal f : std_logic;
signal nElem : std_logic_vector(3 downto 0);

signal ctrl : std_logic; -- Control signal for controlling the direction


begin
idxPut: 	Counter3bit port map (CE =>incPut, Q =>Ax, CLK=> clk, clr =>Reset);
idxGet: 	Counter3bit port map (CE =>incGet, Q =>Bx,CLK=> clk,clr =>Reset);
Mux_putandget: 	  	MUX port map (A=> Ax, B=> Bx, Y =>Address, S=> putget);
Counter:	Counter4bit port map (CE =>Cex, CLK=> clk,clr =>Reset,Q=>nElem, UpDown => incGet);

Cex <= incPut xor incGet;
empty <= (not nElem(0)) and (not nElem(1)) and (not nElem(2)) and (not nElem(3));
full <= nElem(3);
end structural;